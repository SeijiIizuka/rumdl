use rustmark::rules::MD036NoEmphasisOnlyFirst;
use rustmark::rule::Rule;

#[test]
fn test_valid_emphasis() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "This is *emphasized* text\nThis text is also *emphasized*";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_emphasis_only_first_asterisk() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "*First* word emphasized\n**First** word strong";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "First word emphasized\nFirst word strong");
}

#[test]
fn test_emphasis_only_first_underscore() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "_First_ word emphasized\n__First__ word strong";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "First word emphasized\nFirst word strong");
}

#[test]
fn test_emphasis_in_code_block() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "```\n*First* word\n```\n*First* word outside";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "```\n*First* word\n```\nFirst word outside");
}

#[test]
fn test_multiple_emphasis() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "*First* word here\nNormal line\n_First_ word there";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "First word here\nNormal line\nFirst word there");
}

#[test]
fn test_not_first_word() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "The *second* word\nA _middle_ emphasis";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_emphasis_only() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "*Emphasized*\n_Also emphasized_";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_mixed_emphasis() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "*First* _second_ word\n**First** __second__ word";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "First _second_ word\nFirst __second__ word");
}

#[test]
fn test_emphasis_with_punctuation() {
    let rule = MD036NoEmphasisOnlyFirst::default();
    let content = "*Hello,* world!\n*Hi!* How are you?";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Hello, world!\nHi! How are you?");
} 