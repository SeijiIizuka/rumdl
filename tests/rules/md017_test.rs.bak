use rustmark::rules::MD017NoEmphasisAsHeading;
use rustmark::rule::Rule;

#[test]
fn test_valid_emphasis() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "Some text with *emphasis*\nAnd **strong** emphasis";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_emphasis_as_heading_asterisk() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "Text before\n\n*Emphasized heading*\n\nText after";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Text before\n\n## *Emphasized heading*\n\nText after");
}

#[test]
fn test_strong_as_heading_asterisk() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "Text before\n\n**Strong heading**\n\nText after";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Text before\n\n## **Strong heading**\n\nText after");
}

#[test]
fn test_emphasis_as_heading_underscore() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "Text before\n\n_Emphasized heading_\n\nText after";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Text before\n\n## _Emphasized heading_\n\nText after");
}

#[test]
fn test_strong_as_heading_underscore() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "Text before\n\n__Strong heading__\n\nText after";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Text before\n\n## __Strong heading__\n\nText after");
}

#[test]
fn test_multiple_emphasis_headings() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "\n*First*\n\nText\n\n**Second**\n\n_Third_\n";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 3);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "\n## *First*\n\nText\n\n## **Second**\n\n## _Third_\n");
}

#[test]
fn test_in_code_block() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "```\n*Not a heading*\n\n**Also not a heading**\n```\n\n*Real heading*\n";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "```\n*Not a heading*\n\n**Also not a heading**\n```\n\n## *Real heading*\n");
}

#[test]
fn test_long_emphasis() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "\n*This is a very long emphasized text that should be converted to a level 3 heading*\n";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "\n### *This is a very long emphasized text that should be converted to a level 3 heading*\n");
}

#[test]
fn test_not_emphasis_only() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "\nHeading with *emphasis*\n\nText with **strong** words\n";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_no_blank_lines() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "Text\n*Not a heading*\nMore text";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_mixed_emphasis() {
    let rule = MD017NoEmphasisAsHeading::default();
    let content = "\n*_Not valid emphasis_*\n\n**_Also not valid_**\n";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
} 