use rustmark::rules::MD020NoMissingSpaceClosedAtx;
use rustmark::rule::Rule;

#[test]
fn test_valid_closed_atx_headings() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "# Heading 1 #\n## Heading 2 ##\n### Heading 3 ###";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_missing_space_after_opening_hash() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "#No space #\n##Also no space ##";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2);
    assert_eq!(result[0].line, 1);
    assert_eq!(result[1].line, 2);
}

#[test]
fn test_missing_space_before_closing_hash() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "# Heading1#\n## Heading2##";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2);
}

#[test]
fn test_fix_missing_spaces() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "#Heading 1#\n##Heading 2##";
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "# Heading 1 #\n## Heading 2 ##");
}

#[test]
fn test_ignore_non_closed_headings() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "# Regular heading\n## Another heading";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_preserve_indentation() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "   #No space#";
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "   # No space #");
}

#[test]
fn test_multiple_missing_spaces() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "#No space here#";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2); // Both opening and closing spaces missing
}

#[test]
fn test_mixed_space_issues() {
    let rule = MD020NoMissingSpaceClosedAtx::default();
    let content = "# Good space #\n#Bad space#\n# Missing end#\n#Missing start #";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 4); // Two headings with two issues each
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "# Good space #\n# Bad space #\n# Missing end #\n# Missing start #");
} 