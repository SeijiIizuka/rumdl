use rustmark::rules::MD022BlanksAroundHeadings;
use rustmark::rule::Rule;

#[test]
fn test_valid_heading_spacing() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "Some text\n\n# Heading 1\n\nMore text\n\n## Heading 2\n\nFinal text";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty());
}

#[test]
fn test_missing_blank_line_before() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "Some text\n# Heading 1\n\nMore text";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
    assert_eq!(result[0].line, 2);
}

#[test]
fn test_missing_blank_line_after() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "Some text\n\n# Heading 1\nMore text";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 1);
}

#[test]
fn test_fix_missing_blank_lines() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "Some text\n# Heading 1\nMore text";
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Some text\n\n# Heading 1\n\nMore text");
}

#[test]
fn test_custom_blank_lines() {
    let rule = MD022BlanksAroundHeadings::new(2, 2);
    let content = "Text\n\n# Heading\n\nMore text";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 2); // Should have warnings for both before and after
}

#[test]
fn test_first_heading() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "# First heading\n\nSome text";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty()); // No blank line required before first heading
}

#[test]
fn test_last_heading() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "Some text\n\n# Last heading";
    let result = rule.check(content).unwrap();
    assert!(result.is_empty()); // No blank line required after last heading if it's at EOF
}

#[test]
fn test_multiple_headings() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "# H1\n## H2\n### H3\nText";
    let result = rule.check(content).unwrap();
    assert_eq!(result.len(), 5); // Missing blanks between all headings and after last heading
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "# H1\n\n## H2\n\n### H3\n\nText");
}

#[test]
fn test_preserve_existing_blank_lines() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "Text\n\n\n# Heading\n\n\nMore text";
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Text\n\n# Heading\n\nMore text");
}

#[test]
fn test_multiple_fixes() {
    let rule = MD022BlanksAroundHeadings::default();
    let content = "Text 1\n# H1\nText 2\n## H2\nText 3";
    let fixed = rule.fix(content).unwrap();
    assert_eq!(fixed, "Text 1\n\n# H1\n\nText 2\n\n## H2\n\nText 3");
} 